basePath: '{swaggerBasePath}  // Dynamic base path placeholder'
definitions:
  model.AuthRequestDto:
    properties:
      emailOrNickname:
        type: string
      password:
        type: string
      rememberMe:
        type: boolean
    type: object
  model.BoardRequestDto:
    properties:
      name:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  model.JwtToken:
    properties:
      token:
        type: string
    type: object
  model.UserRegistrationDto:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: '{swaggerHost}  // Dynamic host placeholder'
info:
  contact:
    email: support@your-email.com
    name: API Support
    url: http://www.your-support-url.com
  description: This is a sample API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://your.terms.of.service.url
  title: Your API Title
  version: "1.0"
paths:
  /v1/boards:
    post:
      consumes:
      - application/json
      description: Creates a new board based on the provided data
      parameters:
      - description: Board Request Data
        in: body
        name: BoardRequestDto
        required: true
        schema:
          $ref: '#/definitions/model.BoardRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Board created successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new board
      tags:
      - Boards
  /v1/users/activate:
    get:
      consumes:
      - application/json
      description: Activates a user account using the provided activation token.
      parameters:
      - description: Activation token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User successfully activated
          schema:
            type: string
        "400":
          description: Token is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Activate user account
      tags:
      - User
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user by validating their credentials and returns
        a JWT token upon success.
      parameters:
      - description: authRequestDto
        in: body
        name: authRequestDto
        required: true
        schema:
          $ref: '#/definitions/model.AuthRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token response
          schema:
            $ref: '#/definitions/model.JwtToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authenticate user
      tags:
      - Authentication
  /v1/users/logout:
    get:
      consumes:
      - application/json
      description: Logs out the user by clearing all cookies and jwt token.
      produces:
      - application/json
      responses:
        "204":
          description: User successfully logged out
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - User
  /v1/users/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided information.
      parameters:
      - description: userRegistrationDto
        in: body
        name: userRegistrationDto
        required: true
        schema:
          $ref: '#/definitions/model.UserRegistrationDto'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            type: string
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
